// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/health": {
            "get": {
                "description": "Get health status of the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.HealthResponse"
                        }
                    }
                }
            }
        },
        "/api/matches": {
            "get": {
                "description": "Get a list of all soccer matches",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Matches"
                ],
                "summary": "Get all matches",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Match"
                            }
                        }
                    }
                }
            }
        },
        "/api/matches/{id}": {
            "get": {
                "description": "Get a specific match by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Matches"
                ],
                "summary": "Get match by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Match ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Match"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/matches/{id}/notifications": {
            "get": {
                "description": "Get all notifications for a specific match",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get notifications for a match",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Match ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by notification type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by priority",
                        "name": "priority",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Notification"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/notifications": {
            "get": {
                "description": "Get all notifications, optionally filtered by match ID, type, or priority",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get all notifications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by match ID",
                        "name": "match_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by notification type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by priority",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Notification"
                            }
                        }
                    }
                }
            }
        },
        "/api/notifications/important": {
            "get": {
                "description": "Get all notifications marked as important",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get important notifications",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Notification"
                            }
                        }
                    }
                }
            }
        },
        "/api/notifications/{id}": {
            "get": {
                "description": "Get a specific notification by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get notification by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Notification"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "error": {
                    "type": "string",
                    "example": "Resource not found"
                },
                "message": {
                    "type": "string",
                    "example": "The requested resource was not found"
                }
            }
        },
        "main.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "time": {
                    "type": "string",
                    "example": "2024-01-15T15:00:00Z"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "main.Match": {
            "type": "object",
            "properties": {
                "away_team": {
                    "$ref": "#/definitions/main.Team"
                },
                "date_time": {
                    "type": "string",
                    "example": "2024-01-15T15:00:00Z"
                },
                "home_team": {
                    "$ref": "#/definitions/main.Team"
                },
                "id": {
                    "type": "string",
                    "example": "match-1"
                },
                "status": {
                    "type": "string",
                    "example": "scheduled"
                }
            }
        },
        "main.Notification": {
            "type": "object",
            "properties": {
                "away_score": {
                    "type": "integer",
                    "example": 0
                },
                "card_type": {
                    "type": "string",
                    "example": "yellow"
                },
                "home_score": {
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "type": "string",
                    "example": "notif-1"
                },
                "is_important": {
                    "type": "boolean",
                    "example": true
                },
                "match_id": {
                    "type": "string",
                    "example": "match-1"
                },
                "message": {
                    "type": "string",
                    "example": "Bruno Fernandes scores from the penalty spot in the 25th minute"
                },
                "minute": {
                    "type": "integer",
                    "example": 25
                },
                "player_name": {
                    "type": "string",
                    "example": "Bruno Fernandes"
                },
                "priority": {
                    "type": "string",
                    "example": "high"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-15T15:25:00Z"
                },
                "title": {
                    "type": "string",
                    "example": "GOAL! Manchester United 1-0 Liverpool"
                },
                "type": {
                    "type": "string",
                    "example": "goal"
                }
            }
        },
        "main.Team": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "team-1"
                },
                "name": {
                    "type": "string",
                    "example": "Manchester United"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "NotificationCenter API",
	Description:      "A service for soccer match notifications",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
